# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Chirp {
  author: User!
  authorId: Int!
  content: String!
  createdAt: DateTime!
  deleted: Boolean!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input ChirpListRelationFilter {
  every: ChirpWhereInput
  none: ChirpWhereInput
  some: ChirpWhereInput
}

input ChirpOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChirpOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum ChirpScalarFieldEnum {
  authorId
  content
  createdAt
  deleted
  id
  title
  updatedAt
}

input ChirpWhereInput {
  AND: [ChirpWhereInput!]
  NOT: [ChirpWhereInput!]
  OR: [ChirpWhereInput!]
  author: UserRelationFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input ChirpWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  chirp(where: ChirpWhereUniqueInput!): Chirp
  chirps(cursor: ChirpWhereUniqueInput, distinct: [ChirpScalarFieldEnum!], orderBy: [ChirpOrderByWithRelationInput!], skip: Int, take: Int, where: ChirpWhereInput): [Chirp!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  email: String!
  id: Int!
  name: String!
}

type UserCount {
  chirps: Int!
}

input UserOrderByWithRelationInput {
  chirps: ChirpOrderByRelationAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  chirps: ChirpListRelationFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
}
