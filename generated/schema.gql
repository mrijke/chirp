# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateChirp {
  _avg: ChirpAvgAggregate
  _count: ChirpCountAggregate
  _max: ChirpMaxAggregate
  _min: ChirpMinAggregate
  _sum: ChirpSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Chirp {
  author: User!
  authorId: Int!
  content: String!
  createdAt: DateTime!
  deleted: Boolean!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

type ChirpAvgAggregate {
  authorId: Float
  id: Float
}

input ChirpAvgOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
}

type ChirpCountAggregate {
  _all: Int!
  authorId: Int!
  content: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  title: Int!
  updatedAt: Int!
}

input ChirpCountOrderByAggregateInput {
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ChirpCreateInput {
  author: UserCreateNestedOneWithoutChirpsInput!
  content: String!
  createdAt: DateTime
  deleted: Boolean
  title: String!
  updatedAt: DateTime
}

input ChirpCreateNestedManyWithoutAuthorInput {
  connect: [ChirpWhereUniqueInput!]
  connectOrCreate: [ChirpCreateOrConnectWithoutAuthorInput!]
  create: [ChirpCreateWithoutAuthorInput!]
}

input ChirpCreateOrConnectWithoutAuthorInput {
  create: ChirpCreateWithoutAuthorInput!
  where: ChirpWhereUniqueInput!
}

input ChirpCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  deleted: Boolean
  title: String!
  updatedAt: DateTime
}

type ChirpGroupBy {
  _avg: ChirpAvgAggregate
  _count: ChirpCountAggregate
  _max: ChirpMaxAggregate
  _min: ChirpMinAggregate
  _sum: ChirpSumAggregate
  authorId: Int!
  content: String!
  createdAt: DateTime!
  deleted: Boolean!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

input ChirpListRelationFilter {
  every: ChirpWhereInput
  none: ChirpWhereInput
  some: ChirpWhereInput
}

type ChirpMaxAggregate {
  authorId: Int
  content: String
  createdAt: DateTime
  deleted: Boolean
  id: Int
  title: String
  updatedAt: DateTime
}

input ChirpMaxOrderByAggregateInput {
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type ChirpMinAggregate {
  authorId: Int
  content: String
  createdAt: DateTime
  deleted: Boolean
  id: Int
  title: String
  updatedAt: DateTime
}

input ChirpMinOrderByAggregateInput {
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ChirpOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChirpOrderByWithAggregationInput {
  _avg: ChirpAvgOrderByAggregateInput
  _count: ChirpCountOrderByAggregateInput
  _max: ChirpMaxOrderByAggregateInput
  _min: ChirpMinOrderByAggregateInput
  _sum: ChirpSumOrderByAggregateInput
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ChirpOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum ChirpScalarFieldEnum {
  authorId
  content
  createdAt
  deleted
  id
  title
  updatedAt
}

input ChirpScalarWhereInput {
  AND: [ChirpScalarWhereInput!]
  NOT: [ChirpScalarWhereInput!]
  OR: [ChirpScalarWhereInput!]
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input ChirpScalarWhereWithAggregatesInput {
  AND: [ChirpScalarWhereWithAggregatesInput!]
  NOT: [ChirpScalarWhereWithAggregatesInput!]
  OR: [ChirpScalarWhereWithAggregatesInput!]
  authorId: IntWithAggregatesFilter
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: BoolWithAggregatesFilter
  id: IntWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ChirpSumAggregate {
  authorId: Int
  id: Int
}

input ChirpSumOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
}

input ChirpUpdateInput {
  author: UserUpdateOneRequiredWithoutChirpsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChirpUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChirpUpdateManyWithWhereWithoutAuthorInput {
  data: ChirpUpdateManyMutationInput!
  where: ChirpScalarWhereInput!
}

input ChirpUpdateManyWithoutAuthorInput {
  connect: [ChirpWhereUniqueInput!]
  connectOrCreate: [ChirpCreateOrConnectWithoutAuthorInput!]
  create: [ChirpCreateWithoutAuthorInput!]
  delete: [ChirpWhereUniqueInput!]
  deleteMany: [ChirpScalarWhereInput!]
  disconnect: [ChirpWhereUniqueInput!]
  set: [ChirpWhereUniqueInput!]
  update: [ChirpUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ChirpUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [ChirpUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ChirpUpdateWithWhereUniqueWithoutAuthorInput {
  data: ChirpUpdateWithoutAuthorInput!
  where: ChirpWhereUniqueInput!
}

input ChirpUpdateWithoutAuthorInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChirpUpsertWithWhereUniqueWithoutAuthorInput {
  create: ChirpCreateWithoutAuthorInput!
  update: ChirpUpdateWithoutAuthorInput!
  where: ChirpWhereUniqueInput!
}

input ChirpWhereInput {
  AND: [ChirpWhereInput!]
  NOT: [ChirpWhereInput!]
  OR: [ChirpWhereInput!]
  author: UserRelationFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  id: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input ChirpWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createChirp(data: ChirpCreateInput!): Chirp!
  createUser(data: UserCreateInput!): User!
  deleteChirp(where: ChirpWhereUniqueInput!): Chirp
  deleteManyChirp(where: ChirpWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteUser(where: UserWhereUniqueInput!): User
  updateChirp(data: ChirpUpdateInput!, where: ChirpWhereUniqueInput!): Chirp
  updateManyChirp(data: ChirpUpdateManyMutationInput!, where: ChirpWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertChirp(create: ChirpCreateInput!, update: ChirpUpdateInput!, where: ChirpWhereUniqueInput!): Chirp!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  aggregateChirp(cursor: ChirpWhereUniqueInput, orderBy: [ChirpOrderByWithRelationInput!], skip: Int, take: Int, where: ChirpWhereInput): AggregateChirp!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  chirp(where: ChirpWhereUniqueInput!): Chirp
  chirps(cursor: ChirpWhereUniqueInput, distinct: [ChirpScalarFieldEnum!], orderBy: [ChirpOrderByWithRelationInput!], skip: Int, take: Int, where: ChirpWhereInput): [Chirp!]!
  findFirstChirp(cursor: ChirpWhereUniqueInput, distinct: [ChirpScalarFieldEnum!], orderBy: [ChirpOrderByWithRelationInput!], skip: Int, take: Int, where: ChirpWhereInput): Chirp
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByChirp(by: [ChirpScalarFieldEnum!]!, having: ChirpScalarWhereWithAggregatesInput, orderBy: [ChirpOrderByWithAggregationInput!], skip: Int, take: Int, where: ChirpWhereInput): [ChirpGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  chirps(cursor: ChirpWhereUniqueInput, distinct: [ChirpScalarFieldEnum!], orderBy: [ChirpOrderByWithRelationInput!], skip: Int, take: Int, where: ChirpWhereInput): [Chirp!]!
  email: String!
  id: Int!
  name: String!
}

type UserAvgAggregate {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCount {
  chirps: Int!
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  id: Int!
  name: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserCreateInput {
  chirps: ChirpCreateNestedManyWithoutAuthorInput
  email: String!
  name: String!
}

input UserCreateNestedOneWithoutChirpsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChirpsInput
  create: UserCreateWithoutChirpsInput
}

input UserCreateOrConnectWithoutChirpsInput {
  create: UserCreateWithoutChirpsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutChirpsInput {
  email: String!
  name: String!
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  email: String!
  id: Int!
  name: String!
}

type UserMaxAggregate {
  email: String
  id: Int
  name: String
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  email: String
  id: Int
  name: String
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  chirps: ChirpOrderByRelationAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  id
  name
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type UserSumAggregate {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUpdateInput {
  chirps: ChirpUpdateManyWithoutAuthorInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutChirpsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChirpsInput
  create: UserCreateWithoutChirpsInput
  update: UserUpdateWithoutChirpsInput
  upsert: UserUpsertWithoutChirpsInput
}

input UserUpdateWithoutChirpsInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutChirpsInput {
  create: UserCreateWithoutChirpsInput!
  update: UserUpdateWithoutChirpsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  chirps: ChirpListRelationFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
